// file: proto/netsqlite/v1/netsqlite.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: proto/netsqlite/v1/netsqlite.proto

package netsqlitev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NetsqliteService_Ping_FullMethodName  = "/netsqlite.v1.NetsqliteService/Ping"
	NetsqliteService_Exec_FullMethodName  = "/netsqlite.v1.NetsqliteService/Exec"
	NetsqliteService_Query_FullMethodName = "/netsqlite.v1.NetsqliteService/Query"
)

// NetsqliteServiceClient is the client API for NetsqliteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The main service definition for netsqlite operations
type NetsqliteServiceClient interface {
	// Simple check to see if the server/connection is alive and authorized
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Execute a non-query statement (INSERT, UPDATE, DELETE)
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	// Execute a query statement (SELECT) - streams results back
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryResponse], error)
}

type netsqliteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetsqliteServiceClient(cc grpc.ClientConnInterface) NetsqliteServiceClient {
	return &netsqliteServiceClient{cc}
}

func (c *netsqliteServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, NetsqliteService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netsqliteServiceClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, NetsqliteService_Exec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netsqliteServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NetsqliteService_ServiceDesc.Streams[0], NetsqliteService_Query_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryRequest, QueryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NetsqliteService_QueryClient = grpc.ServerStreamingClient[QueryResponse]

// NetsqliteServiceServer is the server API for NetsqliteService service.
// All implementations must embed UnimplementedNetsqliteServiceServer
// for forward compatibility.
//
// The main service definition for netsqlite operations
type NetsqliteServiceServer interface {
	// Simple check to see if the server/connection is alive and authorized
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Execute a non-query statement (INSERT, UPDATE, DELETE)
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	// Execute a query statement (SELECT) - streams results back
	Query(*QueryRequest, grpc.ServerStreamingServer[QueryResponse]) error
	mustEmbedUnimplementedNetsqliteServiceServer()
}

// UnimplementedNetsqliteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNetsqliteServiceServer struct{}

func (UnimplementedNetsqliteServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedNetsqliteServiceServer) Exec(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedNetsqliteServiceServer) Query(*QueryRequest, grpc.ServerStreamingServer[QueryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedNetsqliteServiceServer) mustEmbedUnimplementedNetsqliteServiceServer() {}
func (UnimplementedNetsqliteServiceServer) testEmbeddedByValue()                          {}

// UnsafeNetsqliteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetsqliteServiceServer will
// result in compilation errors.
type UnsafeNetsqliteServiceServer interface {
	mustEmbedUnimplementedNetsqliteServiceServer()
}

func RegisterNetsqliteServiceServer(s grpc.ServiceRegistrar, srv NetsqliteServiceServer) {
	// If the following call pancis, it indicates UnimplementedNetsqliteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NetsqliteService_ServiceDesc, srv)
}

func _NetsqliteService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetsqliteServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetsqliteService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetsqliteServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetsqliteService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetsqliteServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetsqliteService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetsqliteServiceServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetsqliteService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetsqliteServiceServer).Query(m, &grpc.GenericServerStream[QueryRequest, QueryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NetsqliteService_QueryServer = grpc.ServerStreamingServer[QueryResponse]

// NetsqliteService_ServiceDesc is the grpc.ServiceDesc for NetsqliteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetsqliteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "netsqlite.v1.NetsqliteService",
	HandlerType: (*NetsqliteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _NetsqliteService_Ping_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _NetsqliteService_Exec_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _NetsqliteService_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/netsqlite/v1/netsqlite.proto",
}
