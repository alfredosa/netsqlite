// file: proto/netsqlite/v1/netsqlite.proto
syntax = "proto3";

package netsqlite.v1;

import "google/protobuf/struct.proto";

option go_package = "internal/generated/proto/v1;netsqlitev1";

// The main service definition for netsqlite operations
service NetsqliteService {
  // Simple check to see if the server/connection is alive and authorized
  rpc Ping(PingRequest) returns (PingResponse) {} // Now takes database_name

  // Execute a non-query statement (INSERT, UPDATE, DELETE)
  rpc Exec(ExecRequest) returns (ExecResponse) {} // Already takes database_name

  // Execute a query statement (SELECT) - streams results back
  rpc Query(QueryRequest) returns (stream QueryResponse) {} // Already takes database_name

  // --- TODO: Add methods for Transactions (BeginTx, Commit, Rollback) ---
  // --- TODO: Add methods for Prepared Statements (Prepare, ExecPrepared, QueryPrepared, CloseStmt) ---
}

// --- Request/Response Messages ---

// ConnectRequest/Response removed

message PingRequest {
  string database_name = 1; // MUST specify the target database for the ping
}

message PingResponse {
  string message = 1; // e.g., "PONG for db [database_name]"
}

message ExecRequest {
  string database_name = 1; // Identify the target database
  string sql = 2;           // The SQL statement
  repeated google.protobuf.Value args = 3; // Arguments
}

message ExecResponse {
  int64 rows_affected = 1;
  int64 last_insert_id = 2;
}

message QueryRequest {
  string database_name = 1; // Identify the target database
  string sql = 2;           // The SQL query
  repeated google.protobuf.Value args = 3; // Arguments
}

message QueryResponse {
  oneof result {
    Columns columns = 1;
    Row row = 2;
  }
}

message Columns {
  repeated string names = 1;
}

message Row {
  repeated google.protobuf.Value values = 1;
}

// --- TODO: Define messages for Tx/Prepared Stmt methods ---
